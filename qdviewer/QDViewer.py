# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QDViewer
                                 A QGIS plugin
 Querschnittsdaten anzeigen
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-05-11
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Lehmkuhl/Timm
        email                : florian.timm@gv.hamburg.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant
from PyQt5.QtGui import QIcon
from qgis.gui import QgsFileWidget
from qgis.core import QgsVectorLayer, QgsField, QgsProject, QgsFeature, QgsPointXY, QgsGeometry, QgsPoint, \
    QgsCoordinateReferenceSystem, QgsVectorFileWriter
from PyQt5.QtWidgets import QAction

import sqlite3
import math
import time

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .QDViewer_dialog import QDViewerDialog
import os.path


class QDViewer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QDViewer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = QDViewerDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QDViewer')

        self.toolbar = self.iface.addToolBar(u'QDViewer')
        self.toolbar.setObjectName(u'QDViewer')

        self.achsen = None
        self.achsenData = None
        self.querschnitte = None
        self.querschnittData = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QDViewer', message)

    def add_action(self, icon_path, text, callback, enabled_flag=True, add_to_menu=True, add_to_toolbar=True,
                   status_tip=None, whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/QDViewer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'QDViewer'),
            callback=self.run,
            parent=self.iface.mainWindow())

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QDViewer'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    @staticmethod
    def sqrt(t):
        return math.sqrt(t)

    # Vektor berechnen
    @staticmethod
    def dist(p_x1, p_x2, p_y1, p_y2):
        p_dx = p_x2 - p_x1
        p_dy = p_y2 - p_y1
        return QDViewer.einheit(p_dx, p_dy)

    # Einheitsvektor berechnen
    @staticmethod
    def einheit(p_dx, p_dy):
        p_strecke = math.sqrt(p_dx * p_dx + p_dy * p_dy)
        if p_strecke > 0:
            p_dx = p_dx / p_strecke
            p_dy = p_dy / p_strecke
        return p_dx, p_dy, p_strecke

    # Polygon schreiben
    def write_polygon(self, p_x, p_y, row, quer):
        feat = QgsFeature(self.querschnitte.fields())
        feat.setAttributes([row[0], row[1], quer[0], quer[1], quer[2], quer[3], quer[8], quer[9], quer[10], quer[11],
                            quer[12], quer[13], quer[14], quer[15]])
        if len(p_x) > 0:
            points = []
            for i in range(len(p_x)):
                points.append(QgsPointXY(p_x[i], p_y[i]))
            feat.setGeometry(QgsGeometry.fromPolygonXY([points]))
            self.querschnittData.addFeatures([feat])

        # text = "POLYGON (("
        # for i in range(len(p_x)):
        #     text += str(p_x[i]) + " " + str(p_y[i]) + ", "
        # if len(p_x) > 0:
        #     text = text[:-2]
        # text += ")); " + str(row[0]) + "; " + str(row[1]) + "; " + str(quer[0]) + "; " + str(quer[1]) + "; " + \
        #        str(quer[2]) + "; " + str(quer[3]) + "; " + str(quer[4]) + "; " + str(quer[5]) + "; " + \
        #        str(quer[6]) + "; " + str(quer[7]) + "; " + str(quer[8])
        # print(text)
        # self.txt.write(text + "\n")

    def write_linestring(self, p_punkte, row):
        feat = QgsFeature(self.achsen.fields())
        feat.setAttributes([row[0], row[1]])
        if len(p_punkte) > 0:
            points = []
            for p_p in p_punkte:
                points.append(QgsPointXY(p_p[1], p_p[2]))
            feat.setGeometry(QgsGeometry.fromPolylineXY(points))
            self.achsenData.addFeatures([feat])

        # text = "LINESTRING ("
        # for p_p in p_punkte:
        #     text += str(p_p[1]) + " " + str(p_p[2]) + ", "
        # if len(p_punkte) > 0:
        #     text = text[:-2]
        # text += "); " + str(row[0]) + "; " + str(row[1])
        # print(text)
        # self.txt2.write(text + "\n")

    # Normalisiert Vektoren
    @staticmethod
    def norm(p_dx, p_dy):
        p_s = math.sqrt(p_dx * p_dx + p_dy * p_dy)
        if p_s > 0:
            p_dx = p_dx / p_s
            p_dy = p_dy / p_s
        return p_dx, p_dy, p_s

    def make_layers(self):
        # WKT-Dateien anlegen
        # self.txt = open(self.dlg.fw_speichern.filePath(), "w")
        # self.txt.write("Geometrie; VNK; NNK; VST; BST; STREIFEN; STREIFENNR; ABSTAND_VST1; " +
        #           "ABSTAND_VST2; ABSTAND_BST1; ABSTAND_BST2; ART\n")

        # self.txt2 = open(self.dlg.fw_speichern.filePath() + "_achsen.wkt", "w")
        # self.txt2.write("Geometrie; VNK; NNK\n")
        # from qgis.core import QgsMapLayerRegistry
        self.querschnitte = QgsVectorLayer("polygon?crs=epsg:25832", "Querschnitte", "memory")
        self.querschnitte.startEditing()
        self.querschnittData = self.querschnitte.dataProvider()

        self.querschnittData.addAttributes([QgsField("VNK", QVariant.String),
                                            QgsField("NNK", QVariant.String),
                                            QgsField("VST", QVariant.Int),
                                            QgsField("BST", QVariant.Int),
                                            QgsField("STREIFEN", QVariant.String),
                                            QgsField("STREIFENNR", QVariant.Int),
                                            QgsField("ART", QVariant.String),
                                            QgsField("ARTOBER", QVariant.String),
                                            QgsField("BREITE", QVariant.Int),
                                            QgsField("BISBREITE", QVariant.Int),
                                            QgsField("BLPART", QVariant.String),
                                            QgsField("BLPART3", QVariant.String),
                                            QgsField("UIPART", QVariant.String),
                                            QgsField("UIPART3", QVariant.String),
                                            QgsField("LAENGE", QVariant.Int),
                                            QgsField("FLAECHE", QVariant.Double),
                                            QgsField("BAUJAHRGEW", QVariant.Date),
                                            QgsField("ABNAHMEGEW", QVariant.Date),
                                            QgsField("DAUERGEW", QVariant.Int),
                                            QgsField("ABLAUFGEW", QVariant.Date),
                                            QgsField("ERFART", QVariant.String),
                                            QgsField("QUELLE", QVariant.String),
                                            QgsField("ADATUM", QVariant.Date),
                                            QgsField("BEMERKUNG", QVariant.String),
                                            QgsField("BEARBEITER", QVariant.String),
                                            QgsField("STAND", QVariant.Date),
                                            QgsField("PARENTID", QVariant.String),
                                            QgsField("OBJEKTID", QVariant.String),
                                            QgsField("FLAG", QVariant.String)])
        self.querschnitte.commitChanges()
        QgsProject.instance().addMapLayer(self.querschnitte)

        self.achsen = QgsVectorLayer("linestring?crs=epsg:25832", "Achsen", "memory")
        self.achsen.startEditing()
        self.achsenData = self.achsen.dataProvider()

        self.achsenData.addAttributes([QgsField("VNK", QVariant.String), QgsField("NNK", QVariant.String)])  #
        self.achsen.commitChanges()
        QgsProject.instance().addMapLayer(self.achsen)

    def arbeite(self):
        # QgsVectorFileWriter.writeAsVectorFormat(vlyr, newSQLiteFilePath, "utf-8", crs, "SQLite", False, None,
        #                                       ["SPATIALITE=YES"])

        self.make_layers()
        print("Connect DB and copy...")

        dbabschn = QgsVectorLayer(self.dlg.fw_abschn.filePath(), "dbabschn", "ogr")
        db1030 = QgsVectorLayer(self.dlg.fw_1030.filePath(), "db1030", "ogr")
        db255 = QgsVectorLayer(self.dlg.fw_255.filePath(), "db255", "ogr")
        QgsVectorFileWriter.writeAsVectorFormat(dbabschn, self.dlg.fw_speichern.filePath()+"\dbabschn.sqlite", "utf-8",
                                                QgsCoordinateReferenceSystem(), "SQLite")
        QgsVectorFileWriter.writeAsVectorFormat(db255, self.dlg.fw_speichern.filePath()+"\db000255.sqlite", "utf-8",
                                                QgsCoordinateReferenceSystem(), "SQLite")
        QgsVectorFileWriter.writeAsVectorFormat(db1030, self.dlg.fw_speichern.filePath()+"\db001030.sqlite", "utf-8",
                                                QgsCoordinateReferenceSystem(), "SQLite")

        mem_db = sqlite3.connect(':memory:')  # create a memory database

        for old_db_pfad in [self.dlg.fw_speichern.filePath() + "\dbabschn.sqlite",
                            self.dlg.fw_speichern.filePath() + "\db000255.sqlite",
                            self.dlg.fw_speichern.filePath() + "\db001030.sqlite"]:
            old_db = sqlite3.connect(old_db_pfad)
            c = old_db.cursor()
            c.execute('''DROP TABLE geometry_columns''')
            c.execute('''DROP TABLE spatial_ref_sys''')
            query = "".join(line for line in old_db.iterdump())
            mem_db.executescript(query)
        daten = mem_db.cursor()
        mem_db.create_function("sqrt", 1, QDViewer.sqrt)

        print("Tabellen anlegen...")

        daten.execute('''CREATE TABLE "tmp11" ("VNK" varchar(10), "NNK" varchar(10), "SORT" float, "XKOORD" float, 
            "YKOORD" float, "STAND" text, "FLAG" varchar(1), DX float default 0, DY float default 0, 
            laenge float default NULL, STATION float default NULL, ABSTAND float default NULL)''')
        daten.execute('''CREATE TABLE "tmp12" ("VNK" varchar(10), "NNK" varchar(10), "SORT" float, "XKOORD" float, 
            "YKOORD" float, "STAND" text, "FLAG" varchar(1), DX float default 0, DY float default 0, 
            laenge float default NULL, STATION float default NULL, ABSTAND float default NULL)''')
        daten.execute('''CREATE TABLE "tmp13" ("VNK" varchar(10), "NNK" varchar(10), "SORT" float, "XKOORD" float, 
            "YKOORD" float, "STAND" text, "FLAG" varchar(1), DX float default 0, DY float default 0, 
            laenge float default NULL, STATION float default NULL, ABSTAND float default NULL)''')
        daten.execute('''CREATE TABLE "tmp14" ("VNK" varchar(10), "NNK" varchar(10), "SORT" float, "XKOORD" float, 
            "YKOORD" float, "STAND" text, "FLAG" varchar(1), DX float default 0, DY float default 0, 
            laenge float default NULL, STATION float default NULL, ABSTAND float default NULL, 
            DXP float default 0, DYP float default 0)''')

        # DX/DY berechnen
        print("DX/DY berechnen...")
        daten.execute('''INSERT INTO tmp11
            SELECT a.VNK, a.NNK, a.SORT, a.XKOORD, a.YKOORD, a.STAND, a.FLAG, (b.XKOORD - a.XKOORD) DX,
            (b.YKOORD - a.YKOORD) DY, NULL, NULL, NULL FROM DB000255 a, DB000255 b
            WHERE a.VNK = b.VNK AND a.NNK = b.NNK AND a.SORT = (b.SORT + 1);''')

        # Laenge berechnen und Vektor DX/DY zu Einheitsvektor
        print("Laenge berechnen und Vektor DX/DY zu Einheitsvektor...")
        daten.execute('''UPDATE tmp11 SET laenge = sqrt(DX*DX+DY*DY), DX = DX / sqrt(DX*DX+DY*DY), 
             DY = DY / sqrt(DX*DX+DY*DY) WHERE DX != 0 OR DY != 0;''')

        # DX/DY vom zweiten Punkt für ersten übernehmen
        print("DX/DY vom zweiten Punkt für ersten übernehmen...")
        daten.execute('''INSERT INTO tmp11
            SELECT a.VNK, a.NNK, a.SORT, a.XKOORD, a.YKOORD, a.STAND, a.FLAG, b.DX DX, b.DY DY, 0, 0, 0
            FROM DB000255 a, tmp11 b
            WHERE a.VNK = b.VNK AND a.NNK = b.NNK AND a.SORT = 1 AND b.SORT = 2;''')

        # ABSTAND berechnen (Summe der Laenge)
        print("ABSTAND berechnen (Summe der Laenge)...")
        daten.execute('''INSERT INTO tmp12
            SELECT a.VNK, a.NNK, a.SORT, a.XKOORD, a.YKOORD, a.STAND, a.FLAG, a.DX, a.DY, a.laenge, NULL, SUM(b.laenge)
            FROM tmp11 a, tmp11 b
            WHERE a.VNK = b.VNK AND a.NNK = b.NNK AND a.SORT >= b.SORT GROUP BY a.VNK, a.NNK, a.SORT;''')

        # Station berechnen
        print("Station berechnen...")
        daten.execute('''INSERT INTO tmp13
            SELECT a.VNK, a.NNK, a.SORT, a.XKOORD, a.YKOORD, a.STAND, a.FLAG, a.DX, a.DY, a.laenge,
            a.ABSTAND * b.faktor , a.ABSTAND
            FROM tmp12 a, 
            (SELECT b.VNK, b.NNK, c.LEN / max(b.ABSTAND) faktor FROM tmp12 b, DBABSCHN c 
                WHERE b.VNK = c.VNK AND b.NNK = c.NNK GROUP BY b.VNK, b.NNK) b
            WHERE a.VNK = b.VNK AND a.NNK = b.NNK
            GROUP BY a.VNK, a.NNK, a.SORT;''')

        # DXP/DYP berechnen (Verschiebe-Vektor an Stützpunkten)
        print("DXP/DYP berechnen (Verschiebe-Vektor an Stützpunkten)...")
        daten.execute('''INSERT INTO tmp14
            SELECT a.*, a.DX + b.DX, a.DY + b.DY
            FROM tmp13 a, tmp13 b
            WHERE a.VNK = b.VNK AND a.NNK = b.NNK AND a.SORT = (b.SORT - 1);''')

        # Letzten Punkt übernehmen
        print("Letzten Punkt übernehmen...")
        daten.execute('''INSERT INTO tmp14
            SELECT a.*, a.DX, a.DY
            FROM tmp13 a, (SELECT VNK, NNK, max(SORT) SORT FROM tmp13 GROUP BY VNK, NNK) b
            WHERE a.VNK = b.VNK AND a.NNK = b.NNK AND a.SORT = b.SORT;''')

        # DXP/DYP zu Einheitsvektor
        print("DXP/DYP zu Einheitsvektor...")
        daten.execute('''UPDATE tmp14 SET DXP = DXP / sqrt(DXP*DXP+DYP*DYP), DYP = DYP / sqrt(DXP*DXP+DYP*DYP) 
            WHERE DXP != 0 OR DYP != 0;''')

        mem_db.commit()

        print("Querschnitte summieren:")

        print("Tabellen anlegen...")
        daten.execute('''CREATE TABLE tmp1 ("VNK" varchar(10), "NNK" varchar(10), "VST" float,
            "BST" float, "STREIFEN" varchar(1), "STREIFENNR" float, "ART" varchar(3),
            "ARTOBER" varchar(3), "BREITE" float, "BISBREITE" float, "BLPART" varchar(2),
            "BLPART3" varchar(5), "UIPART" varchar(2), "UIPART3" varchar(5), "LAENGE" float,
            "FLAECHE" float, "BAUJAHRGEW" text, "ABNAHMEGEW" text, "DAUERGEW" float, "ABLAUFGEW" text,
            "ERFART" varchar(2), "QUELLE" varchar(2), "ADATUM" text, "BEMERKUNG" varchar(254),
            "BEARBEITER" varchar(64), "STAND" text, "PARENTID" varchar(32), "OBJEKTID" varchar(32),
            "FLAG" varchar(1), ABSTAND_VST1 float default 0, ABSTAND_VST2 float default 0, ABSTAND_BST1 float default 0, 
            ABSTAND_BST2 float default 0);''')

        daten.execute('''CREATE TABLE tmp2 ("VNK" varchar(10), "NNK" varchar(10), "VST" float,
            "BST" float, "STREIFEN" varchar(1), "STREIFENNR" float, "ART" varchar(3),
            "ARTOBER" varchar(3), "BREITE" float, "BISBREITE" float, "BLPART" varchar(2),
            "BLPART3" varchar(5), "UIPART" varchar(2), "UIPART3" varchar(5), "LAENGE" float,
            "FLAECHE" float, "BAUJAHRGEW" text, "ABNAHMEGEW" text, "DAUERGEW" float, "ABLAUFGEW" text,
            "ERFART" varchar(2), "QUELLE" varchar(2), "ADATUM" text, "BEMERKUNG" varchar(254),
            "BEARBEITER" varchar(64), "STAND" text, "PARENTID" varchar(32), "OBJEKTID" varchar(32),
            "FLAG" varchar(1), ABSTAND_VST1 float default 0, ABSTAND_VST2 float default 0, ABSTAND_BST1 float default 0, 
            ABSTAND_BST2 float default 0);''')

        print("Summe links und rechts...")
        daten.execute('''INSERT INTO tmp1 SELECT a.VNK, a.NNK, a.VST, a.BST, a.STREIFEN, a.STREIFENNR, a.ART, a.ARTOBER,
            a.BREITE, a.BISBREITE, a.BLPART, a.BLPART3, a.UIPART, a.UIPART3, a.LAENGE, a.FLAECHE, a.BAUJAHRGEW,
            a.ABNAHMEGEW, a.DAUERGEW, a.ABLAUFGEW, a.ERFART, a.QUELLE, a.ADATUM, a.BEMERKUNG, a.BEARBEITER, a.STAND, 
            a.PARENTID, a.OBJEKTID, a.FLAG,
            (SUM(b.BREITE)) ABSTAND_VST1, 
            NULL,
            (SUM(b.BISBREITE)) ABSTAND_BST1,
            NULL
            FROM DB001030 a, DB001030 b WHERE a.VNK = b.VNK 
            AND b.NNK = a.NNK AND a.VST = b.VST AND a.STREIFEN = b.STREIFEN AND a.STREIFENNR > b.STREIFENNR
            and a.STREIFEN != "M"
            GROUP BY a.VNK, a.NNK, a.VST, a.STREIFEN, a.STREIFENNR;''')

        print("Streifen 1 kopieren...")
        daten.execute('''INSERT INTO tmp1
            SELECT VNK, NNK, VST,BST, STREIFEN, STREIFENNR, ART, ARTOBER, BREITE, BISBREITE, BLPART, BLPART3, UIPART, 
            UIPART3, LAENGE, FLAECHE, BAUJAHRGEW, ABNAHMEGEW, DAUERGEW, ABLAUFGEW, ERFART, QUELLE, ADATUM, BEMERKUNG,
            BEARBEITER, STAND, PARENTID, OBJEKTID, FLAG, 0 ABSTAND_VST1, NULL ABSTAND_VST2, 0 ABSTAND_BST1, 
            NULL ABSTAND_BST2 FROM DB001030 WHERE STREIFENNR = 1;''')

        print("Mittelstreifen addieren...")
        daten.execute('''INSERT INTO tmp2
            SELECT a.VNK, a.NNK, a.VST,a.BST,a.STREIFEN,a.STREIFENNR,a.ART,a.ARTOBER,a.BREITE,a.BISBREITE,a.BLPART,
            a.BLPART3,  a.UIPART,a.UIPART3,a.LAENGE,a.FLAECHE,a.BAUJAHRGEW,a.ABNAHMEGEW,a.DAUERGEW,a.ABLAUFGEW,a.ERFART,
            a.QUELLE, a.ADATUM, a.BEMERKUNG,a.BEARBEITER,a.STAND,a.PARENTID,a.OBJEKTID,a.FLAG,
            (a.ABSTAND_VST1+round(IFNULL(m.BREITE,0) / 2)) ABSTAND_VST1,
            NULL ABSTAND_VST2,
            (a.ABSTAND_BST1+round(IFNULL(m.BISBREITE,0) / 2)) ABSTAND_BST1,
            NULL ABSTAND_BST2
            FROM tmp1 a left join (select * from DB001030 where STREIFEN = "M") m
            on a.VNK = m.VNK AND a.NNK = m.NNK AND a.VST = m.VST;''')

        print("Abstand der Außenkante berechnen...")
        daten.execute('''UPDATE tmp2 
            SET ABSTAND_VST2 = ABSTAND_VST1 + BREITE, 
            ABSTAND_BST2 = ABSTAND_BST1 + BISBREITE;''')

        print("Linke drehen...")
        daten.execute('''UPDATE tmp2 SET 
            ABSTAND_VST1 = - ABSTAND_VST1, 
            ABSTAND_VST2 = - ABSTAND_VST2, 
            ABSTAND_BST1 = - ABSTAND_BST1, 
            ABSTAND_BST2 = - ABSTAND_BST2 WHERE STREIFEN = "L";''')

        print("Mittelstreifen berechnen...")
        daten.execute('''INSERT INTO tmp2
            SELECT VNK, NNK, VST, BST, STREIFEN, STREIFENNR, ART, ARTOBER, BREITE, BISBREITE, BLPART, BLPART3, UIPART,
            UIPART3, LAENGE, FLAECHE, BAUJAHRGEW, ABNAHMEGEW, DAUERGEW, ABLAUFGEW, ERFART, QUELLE, ADATUM, BEMERKUNG,
            BEARBEITER, STAND, PARENTID, OBJEKTID, FLAG,
            ROUND(- BREITE / 2) ABSTAND_VST1,
            ROUND(BREITE / 2) ABSTAND_VST2,
            ROUND(- BISBREITE / 2) ABSTAND_BST1,
            ROUND(BISBREITE / 2) ABSTAND_BST2 FROM DB001030 WHERE STREIFEN = "M";''')

        print("Nicht benötigte Tabellen löschen...")
        daten.execute('''DROP TABLE tmp11''')
        daten.execute('''DROP TABLE tmp12''')
        daten.execute('''DROP TABLE tmp13''')
        daten.execute('''DROP TABLE tmp1''')

        mem_db.commit()

        print("Arbeiten...")
        # Abschnitte selektieren und durchgehen
        daten.execute('SELECT VNK, NNK, LEN FROM DBABSCHN')
        abschn = daten.fetchall()

        for row in abschn:
            # Koordinaten der Achse abfragen
            sql = 'SELECT STATION, XKOORD, YKOORD, DXP, DYP, DX, DY FROM tmp14 WHERE VNK = "' + row[0] + '" AND ' \
                  'NNK = "' + row[1] + '" AND STATION IS NOT NULL AND XKOORD IS NOT NULL AND YKOORD IS NOT NULL AND ' \
                  'DX IS NOT NULL AND DY IS NOT NULL ORDER BY SORT'
            daten.execute(sql)
            punkte = daten.fetchall()

            # Achse als WKT ablegen
            self.write_linestring(punkte, row)

            # Querschnitte laden
            sql = 'SELECT VST, BST, STREIFEN, STREIFENNR, ABSTAND_VST1, ABSTAND_VST2, ABSTAND_BST1, ABSTAND_BST2,' + \
                  ' ART,ARTOBER, BREITE, BISBREITE, BLPART, BLPART3, UIPART, UIPART3, LAENGE, FLAECHE, BAUJAHRGEW,' + \
                  'ABNAHMEGEW, DAUERGEW, ABLAUFGEW, ERFART, QUELLE, ADATUM, BEMERKUNG, BEARBEITER, STAND, PARENTID, ' \
                  'OBJEKTID, FLAG FROM tmp2 WHERE VNK = "' + row[0] + '" AND NNK = "' + row[1] + '" AND ' + \
                  'ABSTAND_VST1 IS NOT NULL AND ABSTAND_VST2 IS NOT NULL AND ABSTAND_BST1 IS NOT NULL AND ' \
                  'ABSTAND_BST2 IS NOT NULL ORDER BY VST, STREIFEN, STREIFENNR'
            daten.execute(sql)

            for quer in daten.fetchall():
                # print(quer)

                x = []
                y = []
                c = 0

                pa = None
                for p in punkte:
                    if p[0] >= quer[0] and c == 0 and pa is not None:
                        # Berechnung Anfangspunkt
                        dx = p[1] - pa[1]
                        dy = p[2] - pa[2]
                        diff = p[0] - pa[0]
                        f = 0
                        if diff > 0:
                            f = (quer[0] - pa[0]) / diff
                        # print(f)

                        dxn, dyn, s = QDViewer.norm(dx, dy)
                        # print("P1")
                        # print(quer[4])

                        if quer[4] is not None:
                            x.append(pa[1] + dx * f + dyn * quer[4] / 100)
                            y.append(pa[2] + dy * f - dxn * quer[4] / 100)

                            x.append(pa[1] + dx * f + dyn * quer[5] / 100)
                            y.append(pa[2] + dy * f - dxn * quer[5] / 100)

                        c = 1
                    if c == 1 and p[0] <= quer[1]:
                        # print("P2")
                        # Prozentualer Abstand
                        f = (p[0]-quer[0])/(quer[1]-quer[0])
                        # print(f)

                        # Abstand interpolieren
                        a = quer[4]+f*(quer[6]-quer[4])
                        # print(a)

                        # Abstand2 interpolieren
                        b = quer[5]+f*(quer[7]-quer[5])
                        # print(b)
                        try:
                            x.insert(0, p[1] - p[4] * a / 100)
                            y.insert(0, p[2] + p[3] * a / 100)
                            x.append(p[1] - p[4] * b / 100)
                            y.append(p[2] + p[3] * b / 100)
                        except TypeError:
                            break

                    if c == 1 and p[0] > quer[1]:
                        # print("P3")
                        # Berechnung Endpunkt
                        dx = p[1] - pa[1]
                        dy = p[2] - pa[2]

                        if (p[0] - pa[0]) != 0:
                            f = (quer[1] - pa[0]) / (p[0] - pa[0])
                        else:
                            f = 1
                        # print(p[0])
                        # print(f)

                        dxn, dyn, s = QDViewer.norm(dx, dy)

                        if quer[6] is not None:
                            x.insert(0, pa[1] + dx * f + dyn * quer[6] / 100)
                            y.insert(0, pa[2] + dy * f - dxn * quer[6] / 100)

                        if quer[7] is not None:
                            x.append(pa[1] + dx * f + dyn * quer[7] / 100)
                            y.append(pa[2] + dy * f - dxn * quer[7] / 100)

                        break

                    pa = p

                self.write_polygon(x, y, row, quer)
        print("Fertig")

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()

        self.dlg.fw_speichern.setStorageMode(QgsFileWidget.GetDirectory)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            self.arbeite()
            pass
